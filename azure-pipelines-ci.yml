trigger: none
pr: none


pool:
  name: PoolRunners

variables:
  IMAGE_NAME: 'nextjsbaseapp'
  DOCKER_IMAGE_TAG: $(Build.BuildID)
  NODE_VERSION: '20.x'

stages:
- stage: validation  # Define a stage for validation.
  displayName: 'Validation'  # Display name for the stage.
  jobs:
  - job: Install_Build_Audit  # Job for installing dependencies and building the project.
    displayName: 'Install Dependencies & Build'  # Display name for the job.
    steps:
    - task: NodeTool@0  # Task to install Node.js.
      inputs:
        versionSpec: $(NODE_VERSION)  # Use the specified Node.js version.
      displayName: 'Install Node.js'  # Display name for the step.
    
    - script: |
        npm ci  # Clean install of dependencies.
      displayName: 'Clean install'  # Display name for the step.
    
    - script: |
        npm test || echo 'Script not found'  # Run tests, handle missing script.
      displayName: 'Test the code'  # Display name for the step.
    
    - script: |
        npm run build --prod  # Build the project for production.
      displayName: 'Build the code'  # Display name for the step.
    
    - script: |
        npm audit --prod  # Audit the production dependencies for vulnerabilities.
      displayName: 'Audit the code'  # Display name for the step.

- stage:
  displayName: 'Build & Push Docker Image'  # Display name for the stage.
  dependsOn: validation  # Depends on the validation stage.
  jobs:
  - job: Build_And_Push_Docker_Image  # Job for building and pushing Docker image.
    displayName: 'Build and Push Docker Image'  # Display name for the job.
    steps:
    - script: |
        echo "Building Docker Image..."
        docker build --no-cache -t $(IMAGE_NAME):$(DOCKER_IMAGE_TAG) .
      displayName: 'Build Docker Image'  # Display name for the build step.
      
    - script: |
        echo "Listing Docker Images..."
        docker images
      displayName: 'List Docker Images'  # Display name for the image listing step.

    - task: Docker@2  # Use the Docker task for pushing to DockerHub.
      displayName: 'Push Docker Image to DockerHub'  # Display name for the push step.
      inputs:
        containerRegistry: 'DockerHub'  # Service connection to DockerHub.
        repository: 'fouadallaoui'  # Replace with your repository name in DockerHub.
        command: 'push'
        arguments: '$(IMAGE_NAME):$(DOCKER_IMAGE_TAG)'

    - script: |
        echo "Removing old Docker images..."
        docker rmi -f $(IMAGE_NAME):$(DOCKER_IMAGE_TAG) || echo "No old image found."
      displayName: 'Clean Up Old Docker Images'  # Display name for the cleanup step.

    - script: |
        echo "Docker image $(IMAGE_NAME):$(DOCKER_IMAGE_TAG) successfully built and pushed."
      displayName: 'Success Notification'  # Display name for logging success.



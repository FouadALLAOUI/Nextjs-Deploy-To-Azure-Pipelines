trigger: none
pr: none

resources:
  pipelines:
  - pipeline: CI_Pipeline  # Reference to CI pipeline
    source: CI-Nextjs-Deploy-To-Azure-Pipelines  # CI pipeline name
    trigger: 
      branches:
        include:
          - master  # Or your target branch

pool:
  name: PoolRunners

variables:
  - name: AZURE_WEBAPP_NAME
    value: 'appdemonextjs'  # Replace with your Web App name
  - name: IMAGE_NAME
    value: 'nextjsbaseapp'
  - name: DOCKERHUB_USER
    value: 'fouadallaoui'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js'

    #- task: Cache@2
    #  inputs:
    #    key: 'npm | "$(Agent.OS)" | package-lock.json'
    #    restoreKeys: |
    #      npm | "$(Agent.OS)"
    #    path: $(npm_config_cache)
    #  displayName: 'Cache npm'

    - script: npm ci
      displayName: 'Install and remove cached node_modules'

    #- task: Cache@2
    #  inputs:
    #    key: next | "$(Agent.OS)" | package-lock.json
    #    path: '$(System.DefaultWorkingDirectory)/.next/cache'
    #  displayName: 'Cache .next/cache'

    - script: npm run build
      displayName: 'Build'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        ArtifactName: 'drop'



- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
    
  jobs:
  - job: Deploy
    displayName: Deploy
    steps:
    - task: AzureWebApp@1
      inputs:
        azureSubscription: 'WebAppService'
        appType: 'webApp'
        appName: 'appdemonextjs'
        package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'













#stages:
#- stage: Deploy
#  displayName: 'Deploy to Azure Web App'
#  jobs:
#  - job: DeployToAzure
#    displayName: 'Deploy Docker Image to Azure Web App'
#    steps:
#
#    # Download build artifacts from CI pipeline
#    - download: CI_Pipeline
#      artifact: 'NextjsBuild'
#      displayName: 'Download Build Artifacts'
#
#    # Deploy to Azure Web App
#    - task: AzureRmWebAppDeployment@4
#      displayName: 'Deploy to Azure Web App'
#      inputs:
#        ConnectionType: 'AzureRM'
#        azureSubscription: 'WebAppService'
#        appType: 'webApp'
#        WebAppName: '$(AZURE_WEBAPP_NAME)'
#        packageForLinux: '$(Pipeline.Workspace)/CI_Pipeline/NextjsBuild'
#        enableCustomDeployment: false
#        DeploymentType: 'zipDeploy'
#        StartupCommand: 'npm start'
#
#    # Download the image tag artifact from CI pipeline
#    #- download: CI_Pipeline
#    #  artifact: 'ImageTag'
#    #  displayName: 'Download Image Tag'
#
#    # Read the image tag from the file
#    #- task: Bash@3
#    #  displayName: 'Set Image Tag Variable'
#    #  inputs:
#    #    targetType: 'inline'
#    #    script: |
#    #      IMAGE_TAG=$(cat $(Pipeline.Workspace)/CI_Pipeline/ImageTag/imageTag.txt)
#    #      echo "##vso[task.setvariable variable=DOCKER_IMAGE_TAG]$IMAGE_TAG"
#    #      echo $(DOCKER_IMAGE_TAG)
#
#    # Deploy to Azure Web App
#    #- task: AzureWebAppContainer@1
#    #  displayName: 'Deploy to Azure Web App'
#    #  inputs:
#    #    azureSubscription: 'WebAppService'  # Your Azure service connection name
#    #    appName: '$(AZURE_WEBAPP_NAME)'
#    #    containers: '$(DOCKERHUB_USER)/$(IMAGE_NAME):$(DOCKER_IMAGE_TAG)'
        